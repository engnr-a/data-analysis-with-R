knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
dpi = 300,
fig.align = "center"
)
# See Options: knitr::opts_chunk$get()
# Bike data
bikes_tbl      <- readRDS("../00_bike_data/bikes_tbl.rds")
bikeshops_tbl  <- readRDS("../00_bike_data/bikeshops_tbl.rds")
orderlines_tbl <- readRDS("../00_bike_data/orderlines_tbl.rds")
bike_orderlines_tbl <- orderlines_tbl %>%
left_join(bikes_tbl,     by = c("product_id" = "bike_id")) %>%
left_join(bikeshops_tbl, by = c("customer_id" = "bikeshop_id")) %>%
mutate(total_price = price_euro * quantity)
View(bikes_tbl)
View(bikes_tbl)
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
dpi = 300,
fig.align = "center"
)
# See Options: knitr::opts_chunk$get()
# eval = FALSE (Show code, but don't run, no output) # whether to run the code or not
# echo = FALSE (Don't show code, but run, show output) # whether to show the source code or not.
# results = "hide" (Show code, and run, but don't show output)
# Load Libraries
library(tidyverse)
library(plotly)
# Bike data
bikes_tbl      <- readRDS("../00_bike_data/bikes_tbl.rds")
bikeshops_tbl  <- readRDS("../00_bike_data/bikeshops_tbl.rds")
orderlines_tbl <- readRDS("../00_bike_data/orderlines_tbl.rds")
bike_orderlines_tbl <- orderlines_tbl %>%
left_join(bikes_tbl,     by = c("product_id" = "bike_id")) %>%
left_join(bikeshops_tbl, by = c("customer_id" = "bikeshop_id")) %>%
mutate(total_price = price_euro * quantity)
bike_orderlines_tbl
sales_by_category_tbl <- bike_orderlines_tbl %>%
dplyr::select(category_2, category_1, total_price) %>%
group_by(category_2, category_1) %>%
summarise(total_revenue = sum(total_price)) %>%
ungroup() %>%
arrange(desc(total_revenue)) %>%
mutate(category_2 = as_factor(category_2) %>% fct_rev())
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
dpi = 300,
fig.align = "center"
)
# See Options: knitr::opts_chunk$get()
# eval = FALSE (Show code, but don't run, no output)
# echo = FALSE (Don't show code, but run, show output)
# results = "hide" (Show code, and run, but don't show output)
# Load Libraries
library(tidyverse)
library(plotly)
library(lubridate)
library(plotly)
# Importing dataset
bikes_tbl      <- readRDS("../00_bike_data/bikes_tbl.rds")
bikeshops_tbl  <- readRDS("../00_bike_data/bikeshops_tbl.rds")
orderlines_tbl <- readRDS("../00_bike_data/orderlines_tbl.rds")
# Importing data set
bikes_tbl      <- readRDS("../00_bike_data/bikes_tbl.rds")
bikeshops_tbl  <- readRDS("../00_bike_data/bikeshops_tbl.rds")
orderlines_tbl <- readRDS("../00_bike_data/orderlines_tbl.rds")
bike_orderlines_tbl <- orderlines_tbl %>%
left_join(bikes_tbl,     by = c("product_id" = "bike_id")) %>%
left_join(bikeshops_tbl, by = c("customer_id" = "bikeshop_id")) %>%
mutate(total_price = price_euro * quantity)
bike_orderlines_tbl
# Formatting
format_to_euro <- function(x, suffix = " €") {
scales::dollar(x,
suffix       = suffix,
prefix       = "",
big.mark     = ".",
decimal.mark = ",")
}
euro_format <- function(scale        = 1,
prefix       = "",
suffix       = " €",
big.mark     = ".",
decimal.mark = ",") {
scales::dollar_format(suffix       = suffix,
prefix       = prefix,
big.mark     = big.mark,
decimal.mark = decimal.mark,
scale        = scale)
}
#Selecting on the needed data...for month
total_sales_m_tbl <- bike_orderlines_tbl %>%
select(order_date, total_price) %>%
mutate(date_rounded = floor_date(order_date, unit = "month")) %>%
group_by(date_rounded) %>%
summarise(total_sales = sum(total_price)) %>%
ungroup() %>%
mutate(label_text = str_glue("Sales: {format_to_euro(total_sales)}
Date: {date_rounded %>% format('%B %Y')}"))
total_sales_m_tbl
#Selecting on the needed data...WEEKLY
total_sales_W_tbl <- bike_orderlines_tbl %>%
select(order_date, total_price) %>%
mutate(date_rounded = floor_date(order_date, unit = "week")) %>%
group_by(date_rounded) %>%
summarise(total_sales = sum(total_price)) %>%
ungroup() %>%
mutate(label_text = str_glue("Sales: {format_to_euro(total_sales)}
Date: {date_rounded %>% format('%B %Y')}"))
total_sales_m_tbl
#Selecting on the needed data...MONTH
total_sales_m_tbl <- bike_orderlines_tbl %>%
select(order_date, total_price) %>%
mutate(date_rounded = floor_date(order_date, unit = "month")) %>%
group_by(date_rounded) %>%
summarise(total_sales = sum(total_price)) %>%
ungroup() %>%
mutate(label_text = str_glue("Sales: {format_to_euro(total_sales)}
Date: {date_rounded %>% format('%B %Y')}"))
total_sales_m_tbl
#Selecting on the needed data...MONTH
total_sales_m_tbl <- bike_orderlines_tbl %>%
select(order_date, total_price) %>%
mutate(date_rounded = floor_date(order_date, unit = "month")) %>%
group_by(date_rounded) %>%
summarise(total_sales = sum(total_price)) %>%
ungroup() %>%
mutate(label_text = str_glue("Sales: {format_to_euro(total_sales)}
Date: {date_rounded %>% format('%B %Y')}"))
total_sales_m_tbl
install.packages("crosstalk")
install.packages(file.choose(), repos=NULL)
install.packages(file.choose(), repos=NULL)
# Shiny
library(flexdashboard)
library(shiny)
library(DT)
# Core
library(tidyverse)
library(lubridate)
# Interactive Visualizations
library(plotly)
# Spatial Data
library(raster)
library(sf)
library(flexdashboard)
# Core
library(tidyverse)
# Interactive Visualizations
library(plotly)
# Spatial Data
library(raster)
library(sf)
# Load Libraries
library(tidyverse)
library(plotly)
library(lubridate)
library(plotly)
# Shiny
library(flexdashboard)
library(shiny)
library(DT)
# Core
library(tidyverse)
library(lubridate)
# Interactive Visualizations
library(plotly)
# Spatial Data
library(raster)
library(sf)
library(flexdashboard)
# Core
library(tidyverse)
# Interactive Visualizations
library(plotly)
# Spatial Data
library(raster)
library(sf)
# Load Libraries
library(tidyverse)
library(plotly)
library(lubridate)
library(plotly)
# Bike data
bikes_tbl      <- readRDS("../00_bike_data/bikes_tbl.rds")
bikeshops_tbl  <- readRDS("../00_bike_data/bikeshops_tbl.rds")
orderlines_tbl <- readRDS("../00_bike_data/orderlines_tbl.rds")
bike_orderlines_tbl <- orderlines_tbl %>%
left_join(bikes_tbl,     by = c("product_id" = "bike_id")) %>%
left_join(bikeshops_tbl, by = c("customer_id" = "bikeshop_id")) %>%
mutate(total_price = price_euro * quantity)
# German spatial data
#germany_sp <- getData('GADM', country='DE', level=1)
#I COULDNT DOWNLOAD REMOTELY DUE TO SOME PROXY RESTRICTION.I DOWNLOAD THE RAW FILE FROM https://gadm.org/download_country_v3.html
germany_sp <-readRDS("../00_bike_data/gadm36_DEU_1_sf.rds")
# Convert SpatialPolygonsDataFrame to an sf dataframe
germany_sf <- st_as_sf(germany_sp) %>%
# Add english names
mutate(VARNAME_1 = ifelse(is.na(VARNAME_1), NAME_1, VARNAME_1))
format_to_euro <- function(x, suffix = " €") {
scales::dollar(x,
suffix       = suffix,
prefix       = "",
big.mark     = ".",
decimal.mark = ",")
}
euro_format <- function(scale        = 1,
prefix       = "",
suffix       = " €",
big.mark     = ".",
decimal.mark = ",") {
scales::dollar_format(suffix       = suffix,
prefix       = prefix,
big.mark     = big.mark,
decimal.mark = decimal.mark,
scale        = scale)
}
geo_plot_tbl <- bike_orderlines_tbl %>%
group_by(state) %>%
summarise(total_revenue = sum(total_price)) %>%
ungroup() %>%
right_join(germany_sf, by = c("state" = "VARNAME_1")) %>%
mutate(total_revenue = ifelse(is.na(total_revenue), 0, total_revenue)) %>%
mutate(label_text = str_glue("State: {state}
Revenue: {format_to_euro(total_revenue)}")) %>%
st_as_sf()
View(geo_plot_tbl)
# Reactive Filter
sales_data_plot <- reactive({
bike_orderlines_tbl%>%
dplyr::select(order_date, state, quantity, category_1, category_2, total_price)%>%
filter(category_1 %in% input$checkbox_group1) %>%
filter(category_2 %in% input$checkbox_group2)%>%
summarise(total_revenue = sum(total_price)) %>%
ungroup() %>%
right_join(germany_sf, by = c("state" = "VARNAME_1")) %>%
mutate(total_revenue = ifelse(is.na(total_revenue), 0, total_revenue)) %>%
mutate(label_text = str_glue("State: {state}
Revenue: {format_to_euro(total_revenue)}")) %>%
st_as_sf()
})
View(bike_orderlines_tbl)
View(bike_orderlines_tbl)
install.packages(file.choose(), repos=NULL)
